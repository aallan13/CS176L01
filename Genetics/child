import java.util.Random;
import java.util.Scanner;

class Characteristics {
    //{"Eye Color", "Hair Color", "Sex", "Height", "Vision"}
    public String[] Characteristic;

    public Characteristics(String[] Ch) {
        Characteristic = new String[5];
        Characteristic = Ch;
    }
}

class FamilyExpressions extends Characteristics {
    public String[][] expression;
    public String[] combination;

    public FamilyExpressions(String[] ch, String[][] exp, String[] comb) {


        super(ch);
        expression = new String[5][4];
        expression = exp;
        combination = new String[4];
        combination = comb;

    }


}

class Mother extends FamilyExpressions {
    public String[] motherGene;
    public String mFirstName;

    public Mother(String[] ch, String[][] exp, String[] comb) {
        super(ch, exp, comb);
        motherGene = new String[5];

    }

    public void changeMother(String[] M) {
        motherGene = M;
    }

    public void setName(String name) {
        mFirstName = name;
    }

    public String getName() {
        return mFirstName;
    }
}

class Father {
    public String[] fatherGene;
    public String fFirstName;

    public Father() {
        fatherGene = new String[5];

    }

    public void changeFather(String[] F) {
        fatherGene = F;
    }

    public void setName(String name) {
        fFirstName = name;
    }

    public String getName() {
        return fFirstName;
    }
}

public class Child {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        Random gene = new Random();
        String[] M = new String[5];
        String[] F = new String[5];
        String[] noValues = new String[5];

//Characteristics, FamilyExpressions, and FamilyCombinations are fixed values
//so they can be defined here in string arrays initialized with the values in the specifications
        String[][] exp = {{"Brown", "Blue", "Green", "Grey"}, {"Brown", "Black", "Blonde", "Red"}, {"Male", "Female", "Female", "Male"}, {"6.5", "6.0", "5.5", "5.0"}, {"normal", "near", "far", "color"}};
        String[] comb = {"DD", "RR", "DR", "RD"};
        String[] ch = {"Eye Color", "Hair Color", "Sex", "Height", "Vision"};

//Send constructor values for Characteristics, Family Expressions, and Family Combinations when constructing Mother
//and use super to construct them. Initially construct Mother and Father with No gene Values.
        Mother mother = new Mother(ch, exp, comb);
        Father father = new Father();
        boolean done = false;
        String name, childName, sex, pronoun, childEColor, childHColor, childHeight, childVision, repeat = "y";
        int geneRandom = 0;

//Now use some looping to allow reset of parents gene information and print the information for each child
//Since Mother and Father genes are randomly generated, you should see different output for each iteration
        while (done == false) {
            System.out.println("Enter the father's name: ");
            name = in.nextLine();
            father.setName(name);

            System.out.println("Enter the mothers name: ");
            name = in.nextLine();
            mother.setName(name);

            for (int i = 0; i < F.length; i++) {
                geneRandom = gene.nextInt(100) + 1;
                if (geneRandom >= 50) {
                    F[i] = "R";
                } else {
                    F[i] = "D";
                }
            }
            for (int i = 0; i < M.length; i++) {
                geneRandom = gene.nextInt(100) + 1;
                if (geneRandom >= 50) {
                    M[i] = "R";
                } else {
                    M[i] = "D";
                }
            }
            if((M[2] + F[2]).equals(comb[0]) || (F[2] + F[2]).equals(comb[3])) {
                sex = mother.expression[2][0];
                pronoun = "He";
            }
            else {
                sex = mother.expression[2][1];
                pronoun = "She";
            }
            System.out.println();
            System.out.print("The sex of the child is a " + sex + ". Please enter a name for the child: ");
            childName = in.nextLine();
            System.out.println();
            System.out.print(childName + " is the child of " + mother.getName() + " and " + father.getName() + ". ");
            if ((M[0] + F[0]).equals(comb[0])){
                childEColor = mother.expression[0][0];
            }
            else if ((M[0] + F[0]).equals(comb[1])){
                childEColor = mother.expression[0][1];
            }
            else if ((M[0] + F[0]).equals(comb[2])){
                childEColor = mother.expression[0][2];
            }
            else {
                childEColor = mother.expression[0][3];
            }
            System.out.print(pronoun + " was born with " + childEColor + " " + mother.Characteristic[0] + ", ");
            if ((M[1] + F[1]).equals(comb[0])){
                childHColor = mother.expression[1][0];
            }
            else if ((M[1] + F[1]).equals(comb[1])){
                childHColor = mother.expression[1][1];
            }
            else if ((M[1] + F[1]).equals(comb[2])){
                childHColor = mother.expression[1][2];
            }
            else {
                childHColor = mother.expression[1][3];
            }
            System.out.print(childHColor + " " + mother.Characteristic[1] + ", ");
            if ((M[3] + F[3]).equals(comb[0])){
                childHeight = mother.expression[3][0];
            }
            else if ((M[3] + F[3]).equals(comb[1])){
                childHeight = mother.expression[3][1];
            }
            else if ((M[3] + F[3]).equals(comb[2])){
                childHeight = mother.expression[3][2];
            }
            else {
                childHeight = mother.expression[3][3];
            }
            System.out.print("will grow to a " + mother.Characteristic[3] + " of " + childHeight + ", ");
            if ((M[4] + F[4]).equals(comb[0])){
                childVision = mother.expression[4][0];
            }
            else if ((M[4] + F[4]).equals(comb[1])){
                childVision = mother.expression[4][1];
            }
            else if ((M[4] + F[4]).equals(comb[2])){
                childVision = mother.expression[4][2];
            }
            else {
                childVision = mother.expression[4][3];
            }
            System.out.print("and will have " + childVision + " " + mother.Characteristic[4] + ".");
            System.out.println();
            System.out.println();
            System.out.print("Would you like repeat the code? (yes or no): ");
            repeat = in.nextLine();
            if (repeat.equalsIgnoreCase("yes")) {
                done = false;
            }
            else if (repeat.equalsIgnoreCase("no")) {
                done = true;
                System.out.println();
                System.out.println("The simulation has ended.");
            }
            else {
                System.out.print("Invalid input. Enter yes or no: ");
                repeat = in.nextLine();
                if (repeat.equalsIgnoreCase("yes")) {
                    done = false;
                }
                else if (repeat.equalsIgnoreCase("no")) {
                    done = true;
                    System.out.println();
                    System.out.println("The code has been ended.");
                }
            }
            

        }

    }
}
